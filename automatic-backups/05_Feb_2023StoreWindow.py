# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StoreWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import CartWindow
import GLOBALS
import sys
import backupFile


class Ui_StoreWindow(object):


    def setupUi(self, StoreWindow):


        ''' FUNCTIONS '''
        # What do u think this does??
        def exitApp():
            sys.exit()

        # Adds the items to the cart
        def addItemsToCart():

            GLOBALS.cart.clear()
            GLOBALS.cartPrices.clear()
            GLOBALS.cartQuantities.clear()

            # Grabs all the checkbox widgets
            storeCbs = self.storeWindow_ItemsFrame.findChildren(QtWidgets.QCheckBox)


            for cb in storeCbs:

                # Detecting which checkbox is checked
                if cb.isChecked():

                    for product in GLOBALS.products:

                        # Indicating what product item is linked to the checkbox
                        if product.getProductID() == cb.objectName():

                            num, ok = QtWidgets.QInputDialog.getInt(StoreWindow, 'Quantity Amount', 'Enter the amount of you would like to purchase: ')

                            # If user hits the accept/ok/enter button
                            if ok:

                                # Adds the item to the cart if the quantity is greater than 0
                                if num > 0:
                                    product.setProductQuantity(num)

                                    subTotal = product.getProductPrice() * product.getProductQuantity()

                                    product.setProductSubTotal(subTotal)

                                    GLOBALS.cart.append(product)
                                    GLOBALS.cartQuantities.append(product.getProductQuantity())
                                    GLOBALS.cartPrices.append(product.getProductSubTotal())

                                    print("Added " + product.getProductName() + " to the cart.")

                                # Prevents user from adding item to cart if they input a quantity <= 0
                                if num <= 0:

                                    cb.setChecked(False) # This will uncheck the products checkbox

                                    print("You cannot have a 0 quantity..")
                                    break


            print("Cart Grand Total: $" + str(round(sum(GLOBALS.cartPrices), 2)))
            print("Total Items in Cart: " + str(sum(GLOBALS.cartQuantities)))

        # This will check if there are items in cart, and will check the checkbox. This is because when the user goes to a different window, the checkboxes get unchecked
        def checkForCartItems():

            # Grabs all the checkbox widgets
            storeCbs = self.storeWindow_ItemsFrame.findChildren(QtWidgets.QCheckBox)

            for cb in storeCbs:

                for product in GLOBALS.products:

                    if product in GLOBALS.cart:

                        # Indicating what product item is linked to the checkbox
                        if product.getProductID() == cb.objectName():

                            cb.setChecked(True) # This will uncheck the products checkbox

        # This will check if the user unchecks to remove an items from the cart, then it will remove said item
        def checkForRemovedItems():

            # Grabs all the checkbox widgets
            storeCbs = self.storeWindow_ItemsFrame.findChildren(QtWidgets.QCheckBox)

            for cb in storeCbs:

                for product in GLOBALS.products:

                    if product in GLOBALS.cart:

                        # Indicating what product item is linked to the checkbox
                        if product.getProductID() == cb.objectName():

                            if not cb.isChecked():
                                GLOBALS.cart.remove(product)

                                print(str(product.getProductName()) + " was removed.")

        # Routes user to cart window
        def enterCartWindow():

            checkForRemovedItems()

            self.window = QtWidgets.QMainWindow()
            self.ui = CartWindow.Ui_CartWindow()
            self.ui.setupUi(self.window)
            self.window.show()

            # Hiding the Store Window
            StoreWindow.hide()

            print("Routing to Cart Window")

        StoreWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint) # Hides the title bar
        StoreWindow.setObjectName("StoreWindow")
        StoreWindow.resize(1063, 780)
        StoreWindow.setMinimumSize(QtCore.QSize(1063, 780))
        StoreWindow.setMaximumSize(QtCore.QSize(1063, 780))
        self.centralwidget = QtWidgets.QWidget(StoreWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(200, 25, 200, 25)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.storeWindow_AddItemsToCartBtn = QtWidgets.QPushButton(self.centralwidget)
        self.storeWindow_AddItemsToCartBtn.clicked.connect(addItemsToCart)
        self.storeWindow_AddItemsToCartBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.storeWindow_AddItemsToCartBtn.setMaximumSize(QtCore.QSize(185, 16777215))
        font = QtGui.QFont()
        font.setFamily("Public Sans Medium")
        font.setPointSize(11)
        self.storeWindow_AddItemsToCartBtn.setFont(font)
        self.storeWindow_AddItemsToCartBtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.storeWindow_AddItemsToCartBtn.setAutoFillBackground(False)
        self.storeWindow_AddItemsToCartBtn.setStyleSheet("background:rgb(34, 48, 255);\n"
"color: white;\n"
"border: none;")
        self.storeWindow_AddItemsToCartBtn.setObjectName("storeWindow_AddItemsToCartBtn")
        self.horizontalLayout.addWidget(self.storeWindow_AddItemsToCartBtn)
        self.storeWindow_CartBtn = QtWidgets.QPushButton(self.centralwidget)
        self.storeWindow_CartBtn.clicked.connect(enterCartWindow)
        self.storeWindow_CartBtn.setMinimumSize(QtCore.QSize(80, 40))
        self.storeWindow_CartBtn.setMaximumSize(QtCore.QSize(12, 16777215))
        font = QtGui.QFont()
        font.setFamily("Public Sans Medium")
        font.setPointSize(11)
        self.storeWindow_CartBtn.setFont(font)
        self.storeWindow_CartBtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.storeWindow_CartBtn.setAutoFillBackground(False)
        self.storeWindow_CartBtn.setStyleSheet("background:rgb(34, 48, 255);\n"
"color: white;\n"
"border: none;")
        self.storeWindow_CartBtn.setObjectName("storeWindow_CartBtn")
        self.horizontalLayout.addWidget(self.storeWindow_CartBtn)
        self.storeWindow_LogoutBtn = QtWidgets.QPushButton(self.centralwidget)
        self.storeWindow_LogoutBtn.clicked.connect(exitApp)
        self.storeWindow_LogoutBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.storeWindow_LogoutBtn.setMaximumSize(QtCore.QSize(120, 16777215))
        font = QtGui.QFont()
        font.setFamily("Public Sans Medium")
        font.setPointSize(11)
        self.storeWindow_LogoutBtn.setFont(font)
        self.storeWindow_LogoutBtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.storeWindow_LogoutBtn.setAutoFillBackground(False)
        self.storeWindow_LogoutBtn.setStyleSheet("background:rgb(34, 48, 255);\n"
"color: white;\n"
"border: none;")
        self.storeWindow_LogoutBtn.setObjectName("storeWindow_LogoutBtn")
        self.horizontalLayout.addWidget(self.storeWindow_LogoutBtn)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setMinimumSize(QtCore.QSize(0, 0))
        self.scrollArea.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.scrollArea.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.scrollArea.setStyleSheet("QScrollArea {\n"
"    border: 1px solid rgb(230, 230, 230);\n"
"}\n"
"\n"
"QScrollBar:vertical {\n"
"    border: none;\n"
"    background-color: white;\n"
"    border-radius: 5px;\n"
"    width: 15px;\n"
"    margin: 15px 0 0;\n"
"}\n"
"\n"
"\n"
"/* Handle */\n"
"QScrollBar::handle:vertical {\n"
"    background-color: rgb(34, 48, 255);\n"
"}\n"
"\n"
"/* Top Btn */\n"
"QScrollBar::sub-line:vertical {\n"
"    background-color:rgb(34, 48, 255);\n"
"}")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1028, 1218))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.storeWindow_ItemsFrame = QtWidgets.QFrame(self.scrollAreaWidgetContents)

        # THIS WILL MAKE THE HEIGHT CHANGE DYNAMICALLY
        storeWindow_ItemsFrameSizeHint = self.storeWindow_ItemsFrame.sizeHint().height()
        self.storeWindow_ItemsFrame.setMinimumHeight(storeWindow_ItemsFrameSizeHint)

        self.storeWindow_ItemsFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.storeWindow_ItemsFrame.setFrameShadow(QtWidgets.QFrame.Raised)



        self.storeItemsVerticalLayout = QtWidgets.QVBoxLayout()

        cbNum = 0

        for item in GLOBALS.products:
            # Display the different products (name, price, images) into this frame
            cbNum = cbNum + 1

            self.storeItem = QtWidgets.QWidget()
            self.storeItem.setMinimumHeight(150)
            self.storeItemLayout = QtWidgets.QHBoxLayout()

            self.storeItemLayout.setContentsMargins(40, 0, 30, 0)

            self.storeItemImgHolder = QtWidgets.QLabel()
            self.storeItemImg = QtGui.QPixmap(item.getProductImg())
            self.storeItemImg = self.storeItemImg.scaledToWidth(115) # This is how u resize an image



            self.storeItemImgHolder.setPixmap(self.storeItemImg)

            # self.storeItemImgHolder.show()

            self.storeItemName = QtWidgets.QLabel(item.getProductName())
            self.storeItemName.setStyleSheet("padding-left: 50px;")

            self.storeItemPrice = QtWidgets.QLabel("$" + str(item.getProductPrice()))
            self.storeItemPrice.setStyleSheet("padding-left: 100px;")

            self.storeItemCB = QtWidgets.QCheckBox("Add/Remove")
            self.storeItemCB.setStyleSheet("padding-left: 80px;")

            self.storeItemCB.setObjectName("storeItem_" + str(cbNum))

            self.storeItem.setLayout(self.storeItemLayout)

            self.storeItemLayout.addWidget(self.storeItemImgHolder)
            self.storeItemLayout.addWidget(self.storeItemName)
            self.storeItemLayout.addWidget(self.storeItemPrice)
            self.storeItemLayout.addWidget(self.storeItemCB)
            self.storeItemsVerticalLayout.addWidget(self.storeItem)



        self.storeWindow_ItemsFrame.setLayout(self.storeItemsVerticalLayout)
        self.storeWindow_ItemsFrame.setObjectName("storeWindow_ItemsFrame")
        self.verticalLayout_2.addWidget(self.storeWindow_ItemsFrame)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)
        StoreWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(StoreWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1063, 21))
        self.menubar.setObjectName("menubar")
        StoreWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(StoreWindow)
        self.statusbar.setObjectName("statusbar")
        StoreWindow.setStatusBar(self.statusbar)

        self.retranslateUi(StoreWindow)
        QtCore.QMetaObject.connectSlotsByName(StoreWindow)

        checkForCartItems()


    def retranslateUi(self, StoreWindow):
        _translate = QtCore.QCoreApplication.translate
        StoreWindow.setWindowTitle(_translate("StoreWindow", "ANIMEX - Store"))
        self.storeWindow_AddItemsToCartBtn.setText(_translate("StoreWindow", "ADD ITEMS TO CART"))
        self.storeWindow_CartBtn.setText(_translate("StoreWindow", "CART"))
        self.storeWindow_LogoutBtn.setText(_translate("StoreWindow", "LOGOUT"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    StoreWindow = QtWidgets.QMainWindow()
    ui = Ui_StoreWindow()
    ui.setupUi(StoreWindow)
    StoreWindow.show()
    print("YOU CANNOT RUN THIS AS THE APP LAUNCHER.. Run StartWindow.py!")

    # Backing up files
    backupFile.backupAllFiles()

    sys.exit()
